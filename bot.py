import subprocess
import time
import requests
import platform as pf
import os
import pyautogui as pag
from sound import Sound

from loguru import logger

import cfg
from pyrogram import Client, filters
from pyrogram.errors import FloodWait
from pyrogram import enums
from pyrogram.types import ReplyKeyboardMarkup
from pyromod import listen


curs = ''




app = Client("bot", api_id=cfg.api_id, api_hash=cfg.api_hash, bot_token=cfg.TOKEN)





with app:
    start_start = ReplyKeyboardMarkup(
                [
                    ["/start"],  # First row
                ],
                resize_keyboard=True  # Make the keyboard smaller
            )
    app.send_message(cfg.developer_id, f"{cfg.start_text}", reply_markup=start_start)




@app.on_message(filters.command("start", prefixes="/"))
async def app_start(_, message):
    print(message.from_user.id)
    if message.from_user.id == cfg.developer_id:
        await app.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)   
    else:
        alert = f'–ö—Ç–æ-—Ç–æ –ø—ã—Ç–∞–ª—Å—è –∑–∞–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É: {message.text}\n'
        alert += f'ID: {message.from_user.id}\n'
        alert += f'Username: @{message.from_user.username}'
        await app.send_message(cfg.developer_id, alert)

@app.on_message(filters.command("PC Info", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        response = requests.get("http://jsonip.com/").json()
        msg = f"–ò–º—è –ü–ö: {pf.node()}\nIP: {response['ip']}\n–°–∏—Å—Ç–µ–º–∞: {pf.system()} {pf.release()}"
        await app.send_message(cfg.developer_id, msg)

@app.on_message(filters.command("Screen", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        try:
            pag.screenshot('s.png')
            await app.send_message(message.from_user.id, "Screenshot uploading...")
            await app.send_photo(message.from_user.id, open("s.png", 'rb'))
        except:
            await app.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@app.on_message(filters.command("chat", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        asking = await message.chat.ask("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω.")
        text = asking.text
        await app.send_message(message.from_user.id, f"–¢–µ–∫—Å—Ç  '{text}'  –æ—Ç–æ–±—Ä–∞–∂—ë–Ω.")
        result = pag.prompt(f"{text}")
        await app.send_message(message.from_user.id, f"–û—Ç–≤–µ—Ç: {result}")

@app.on_message(filters.command("msg", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        asking = await message.chat.ask("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω.")
        text = asking.text
        await app.send_message(message.from_user.id, f"–¢–µ–∫—Å—Ç  '{text}'  –æ—Ç–æ–±—Ä–∞–∂—ë–Ω.")
        pag.alert(f"{text}")
        
@app.on_message(filters.command("shutdown", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        asking = await message.chat.ask("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—ã–∫–ª—é—á–∏—Ç—å –ü–ö?")
        countdown_1 = asking.text
        subprocess.run(f"shutdown -s -t {countdown_1}", shell=True)
        await app.send_message(message.from_user.id, f"–ü–ö –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ {countdown_1} —Å–µ–∫—É–Ω–¥.")

@app.on_message(filters.command("restart", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        asking = await message.chat.ask("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö?")
        countdown_2 = asking.text
        subprocess.run(f"shutdown -r -t {countdown_2}", shell=True)
        await app.send_message(message.from_user.id, f"–ü–ö –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ {countdown_2} —Å–µ–∫—É–Ω–¥.")

@app.on_message(filters.command("exec", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        asking = await message.chat.ask("–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É")
        in_cmd = asking.text
        subprocess.run(f'{in_cmd}', shell=True)
        await app.send_message(message.from_user.id, "–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞.")



@app.on_message(filters.command("Hotkeys", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        await app.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É:", reply_markup=hotkeys)


            
@app.on_message(filters.command("–æ—Ç–º–µ–Ω–∞", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        subprocess.run('shutdown -a')
        await app.send_message(message.from_user.id, "–í—ã–∫–ª—é—á–µ–Ω–∏–µ/–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@app.on_message(filters.command("Open App", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        await app.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=open_app1)
            
@app.on_message(filters.command("Back", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        await app.send_message(message.from_user.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é")
        await app.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)

@app.on_message(filters.command("–ú—ã—à–∫–∞", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        await app.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=mouse_keyboard)
            
@app.on_message(filters.command("‚¨Ü", prefixes=""))
def command(_, message):
    if message.from_user.id == cfg.developer_id:
        x, y = pag.position()
        pag.moveTo(x, int(y - curs))
            
@app.on_message(filters.command("‚¨á", prefixes=""))
def command(_, message):
    if message.from_user.id == cfg.developer_id:
        x, y = pag.position()
        pag.moveTo(x, int(y+curs))
            
@app.on_message(filters.command("‚¨Ö", prefixes=""))
def command(_, message):
    if message.from_user.id == cfg.developer_id:
        x, y = pag.position()
        pag.moveTo(int(x - curs), y)
            
@app.on_message(filters.command("‚û°", prefixes=""))
def command(_, message):
    if message.from_user.id == cfg.developer_id:
        x, y = pag.position()
        pag.moveTo(int(x + curs), y)
            
@app.on_message(filters.command("–õ–ö–ú", prefixes=""))
def command(_, message):
    if message.from_user.id == cfg.developer_id:
        pag.leftClick()
            
@app.on_message(filters.command("–ü–ö–ú", prefixes=""))
def command(_, message):
    if message.from_user.id == cfg.developer_id:
        pag.rightClick()
            
@app.on_message(filters.command("–†–∞–∑–º–∞—Ö –ö—É—Ä—Å–æ—Ä–∞", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        asking = await message.chat.ask("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–∞—Ö –∫—É—Ä—Å–æ—Ä–∞:")
        try:
            global curs
            curs = int(asking.text)
        except:
            await app.send_message(message.from_user.id, "–û—à–∏–±–∫–∞.")
            
@app.on_message(filters.command("–ó–≤—É–∫", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        await app.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=rc_volume_keyboard)
            
@app.on_message(filters.command("-", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        Sound.volume_down()
        await app.send_message(message.from_user.id, f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ.\nCurrent volume | {str(Sound.current_volume())}')
            
@app.on_message(filters.command("+", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        Sound.volume_up()
        await app.send_message(message.from_user.id, f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ.\nCurrent volume | {str(Sound.current_volume())}')
            
@app.on_message(filters.command("üîá", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        Sound.mute()
        await app.send_message(message.from_user.id, f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ.\nSound muted | {str(Sound.is_muted())}')
            
@app.on_message(filters.command("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        asking = await message.chat.ask("–í–≤–µ–¥–∏ —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
        try:
            vol = int(asking.text)
            Sound.volume_set(vol)
            await app.send_message(message.from_user.id, f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ.\nCurrent volume | {str(Sound.current_volume())}")
        except:
            await app.send_message(message.from_user.id, "–û—à–∏–±–∫–∞.")
            
@app.on_message(filters.command("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        await app.send_message(message.from_user.id, f'Current volume | {str(Sound.current_volume())}\nSound muted | {str(Sound.is_muted())}') 
            
@app.on_message(filters.command("Discord", prefixes=""))
def command(_, message):
    if message.from_user.id == cfg.developer_id:
        os.startfile(r"C:\Users\zombi\AppData\Local\Discord\Discord.lnk")
            
@app.on_message(filters.command("Process Hacker 2", prefixes=""))
def command(_, message):
    if message.from_user.id == cfg.developer_id:
        os.startfile(r"C:\Users\zombi\Desktop\Process Hacker 2.lnk")
            
@app.on_message(filters.command("Chrome", prefixes=""))
def command(_, message):
    if message.from_user.id == cfg.developer_id:
        os.startfile(r"C:\Program Files\Google\Chrome Beta\Application\chrome.exe")
            
@app.on_message(filters.command("Steam", prefixes=""))
def command(_, message):
    if message.from_user.id == cfg.developer_id:
        os.startfile(r"C:\Program Files (x86)\Steam\steam.exe")
            
@app.on_message(filters.command("Soundpad", prefixes=""))
def command(_, message):
    if message.from_user.id == cfg.developer_id:
        os.startfile(r"D:\Apps\Soundpad\Soundpad.exe")
            
@app.on_message(filters.command("Alt+F4", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        pag.hotkey('alt', 'f4')
        await app.send_message(message.from_user.id, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ.")
            
@app.on_message(filters.command("Task Manager", prefixes=""))
async def command(_, message):
    if message.from_user.id == cfg.developer_id:
        pag.hotkey('ctrl', 'shift', 'esc')
        await app.send_message(message.from_user.id, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ.")
            












    



start_start = ReplyKeyboardMarkup(
                [
                    ["/start"],  # First row
                ],
                resize_keyboard=True  # Make the keyboard smaller
            )

menu_keyboard = ReplyKeyboardMarkup(
                [
                    ["msg", "Screen", "chat"],  # First row
                    ["Shutdown", "Exec", "Restart"],  # Second row
                    ["Hotkeys", "–û—Ç–º–µ–Ω–∞", "Open App"],  # Third row
                    ["–ú—ã—à–∫–∞", "PC Info", "–ó–≤—É–∫"]  # Fourth row
                ],
                resize_keyboard=True  # Make the keyboard smaller
            )

hotkeys = ReplyKeyboardMarkup(
                [
                    ["Alt+F4", "Task Manager"],  # First row
                    ["Back"],  # Second row
                ],
                resize_keyboard=True  # Make the keyboard smaller
            )

open_app1 = ReplyKeyboardMarkup(
                [
                    ["Discord", "Process Hacker 2", "Chrome"],  # First row
                    ["Steam", "Soundpad"],  # Second row
                    ["Back"],  # Third row
                ],
                resize_keyboard=True  # Make the keyboard smaller
            )

mouse_keyboard = ReplyKeyboardMarkup(
                [
                    ["‚¨Ü"],  # First row
                    ["‚¨Ö", "‚û°"], #Second row
                    ["‚¨á"], #Third row
                    ["–õ–ö–ú", "–ü–ö–ú"],  # Fourth row
                    ["–†–∞–∑–º–∞—Ö –ö—É—Ä—Å–æ—Ä–∞"],  # Fifth row
                    ["Back"] #Sixth row
                ],
                resize_keyboard=True  # Make the keyboard smaller
            )

rc_volume_keyboard = ReplyKeyboardMarkup(
                [
                    ["-", "+"],  # First row
                    ["üîá"],  # Second row
                    ["–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "–¢–µ–∫—É—â–∏–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],  # Third row
                    ["Back"],
                ],
                resize_keyboard=True  # Make the keyboard smaller
            )

















































































































































































































































if __name__ == '__main__':
	while True:
		try:
			logger.success("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.")
			app.run()
		except:
			time.sleep(10)